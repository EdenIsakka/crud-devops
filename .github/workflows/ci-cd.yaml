name: CI/CD Pipeline

on:
  push:
    branches: [ feature/doctor-crud ]
  pull_request:
    branches: [ feature/doctor-crud ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el repositorio
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Show worskpace structure
        run: ls -R

      # 2. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # 3. Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest coverage

      # 4. Ejecutar las pruebas unitarias
      - name: Run tests with PythonPath
        run: PYTHONPATH=$GITHUB_WORKSPACE pytest --maxfail=1 --disable-warnings -q

      # 5. Generar reporte de cobertura
      - name: Run coverage
        run: |
          coverage run -m pytest
          coverage report -m

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el repositorio
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Iniciar sesión en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t miapp:latest .
          docker tag miapp:latest ${{ secrets.DOCKER_USERNAME }}/miapp:latest

      # 5. Empujar la imagen al registro
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/miapp:latest

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy to Production
        run: |
          echo "Aquí iría el comando para desplegar tu aplicación"
          # Ejemplo: ssh usuario@tu_servidor 'docker pull ${{ secrets.DOCKER_USERNAME }}/miapp:latest && docker-compose up -d'
